1. Проблем: Пакман е игра и изисква динамична платформа за разработката си.
Употребата на канвас би била най-логичната идея за тази цел, но тъй като
задачата изришно забранява канваси, ще трябва да обработя html страницата, 
като създам функции за улеснение. Функции, които биха играли ролята на
.fillRect() и други подобни. За .fillRect(x,y,a,b) например ще създавам един 
<div> елемент с абсолютна позиция, x - left, y - top, a - width, b - height.
Това ще реши проблема с липсата на динамика при html страниците.

2. След като вече имам пълна свобода над страницата, трябва да измисля под
каква форма ще съществува терена и всичко върху него. Ще ползвам двумерен
масив, в който 0 ще е за празно, 1 за пакман, 2 за стена, 3 за духове, 4 за монета.
Останалите елементи ще вкарам в по-късен етап.

3. За да представя масива визуално, за начало няма да бързам с изображенията,
а просто ще рисувам различни на цвят квадратни div елементи. За да ги
рисувам ще ползвам функцията, която току що създадох "fillRect".

3.5 Ще го рисувам на фреймове. Всеки фрейм ще трия старите div елементи и
ще ги прерисувам с нови стойности.

4. Разположението на стените за сега не е важно. За сега само трябва да
създавам някакъв терен и да накарм пакмана да се движи по него.

5. В началото всяка празна клетка(0) става монета(4).

6 Сега, след като основната структура е готова, ще сложа изображението на фона.
След това трябва да накарам стените да съответстват на стените от изображението.
За целта ще направя така че временно, когато натисна някое квадратче, да
прибавя към стринг, който ще нарека n: n+="arr[квадратче.x][квадратче.y] = 2; ".
После ще конзол-логна този стринг и директно ще го запиша в кода. Така ще спестя
време.
if (event.key === "1") {
    if(arr[Math.floor(mouseX/cellSize)][Math.floor(mouseY/cellSize)] !== 5){
        arr[Math.floor(mouseX/cellSize)][Math.floor(mouseY/cellSize)] = 5
        n += `arr[${Math.floor(mouseX/cellSize)}][${Math.floor(mouseY/cellSize)}] = 2; `
    }
}
if (event.key === "2") {
    console.log(n)
}

7. Време е да сложа изображения за монетите и да броя точки за изядена монета.

8. Пакман не е просто едно изображение, а са много, които се сменят в зависимост 
от ситуацията. За щастие всички изображения са разположени по удобен начин върху
главното изображение. Важно е обаче да рисувам пакмана с размер 80% по голям от
размера на една клетка.

9. Духовете са 4, всеки от които има различен характер. За сега обаче ще започна
с това да създам само един, който ще гони пакман. За да го накарм да гони пакман,
ще ползвам BFS(Breadth First Search) Path Finding. Това е алгоритъм за обхождане
на дървета. Държи се като вълна, разпространяваща се по дървото. "Но ти работиш
с двумерен масив, а не с дърво." Да. Това не пречи да го разглеждам като дърво.
Принципът е същия. Ноудовете ще бъдат клетките, които не са стени, а връзки ще 
има между всички клетки, които се допират. Вълната ще почне от позицията на духа
и ще търси пакмана. С по прости думи това означава че на всеки фрейм, ще създавам
нов масив, същия като основния масив, но с тази разлика че ще пази и втора стайност
{type: 1/2/3... , parent: null} всяка клетка около пакман, ако не е стена, ще
получи за parent своите x и y(arr[x][y].parent = {x:x,y:y}). После ще повторя,
да кажем 80 пъти(това е дължината на вълната), следващата стъпка. Тук ще обиколя
масива и когато се спра на клетка, ще проверя дали има родител. Ако има, ще 
проверя дали четирите й съседа не са стени и дали нямат родители. Ако двете
условия са спазени, техен родител ще стане родителя на настоящата клетка.
Всичко, което трябва да направя сега, когато това вече се е повторило 80 пъти,
е да проверя родителя на келтката с пакман. После ще преместя духа на кординатите,
на които е родителя. После ще оптимизирам алгоритъма.

10. Някои аркадни пакман машини пазят локалните топ резултати. За сега ще пазя
само един топ разултат, вместо няколкото най високи, заедно с имената на хората,
постигнали ги. Ще ползвам Web Storage API за тази цел.

11. В 21-ви век сме и да пазим резултатите локално е смешно, когато има вариант
да ги пазим online в един голям database. Ще започна като създам начална страница,
с форма, която приема име и парола. Ще създам express js api, за да получавам
реазултата от формата. За database ще ползвам MongoDB, защото се сетъпва бързо.
Ще създам MongoDB online cluster. В него ще създам дейтабейс, с име "Pacman" и
таблица "Accounts". Всеки listing в таблицата ще има 3 атрибута - име, парола и
резултат. Когато апито получу резултата от формата за име и парола, то ще
проверява дали има запис в базата, със същите име и парола. Ако има, ще върне
резултат "false" или "true" + резултат от листинга. Ако началната страница 
получу "false", ще изпише, че има грешка в името или паролата. Ако получи "true",
ще заведе клиента към страницата с пакман. В началната страница ще сложа и опция
за създаване на акаунт. С нея клиента ще праща име и парола към апито и то ще 
проверява дали има такова име в базата. Ако има, на клиента ще се изпише че такова
име вече съществува, но ако няма, ще създаде листинг със същите име, парола и
резултат - 0.